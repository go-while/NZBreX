name: "Test runners"

on:
  push:
    branches:
      - 'gpt-tests-1748440700'
    tags:
      - "test*"
  release:
    types: [published]
  workflow_dispatch:
  repository_dispatch:
  pull_request:
    branches:
      #- main
      - testing

permissions:
  contents: write
  packages: read

jobs:
  build_matrix:
    name: Build ${{ matrix.name }}
    runs-on:
      - self-hosted
      - ${{ matrix.runner_label }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Alpine Linux cross-builds (musl)
          # amd64
          - runner_label: ubu2204
            os: linux
            arch: amd64
            name: alpine-amd64
            libc: musl
          # arm64
          - runner_label: ubu2204
            os: linux
            arch: arm64
            name: alpine-arm64
            libc: musl
          # i386
          - runner_label: ubu2204
            os: linux
            arch: 386
            name: alpine-i386
            libc: musl
          # armv7
          - runner_label: ubu2204
            os: linux
            arch: arm
            name: alpine-armv7
            libc: musl

          # FreeBSD cross-builds
          # amd64
          - runner_label: ubu2204
            os: freebsd
            arch: amd64
            name: freebsd-amd64
          # arm64
          - runner_label: ubu2204
            os: freebsd
            arch: arm64
            name: freebsd-arm64
          # i386
          - runner_label: ubu2204
            os: freebsd
            arch: 386
            name: freebsd-i386
          # armv7
          - runner_label: ubu2204
            os: freebsd
            arch: arm
            name: freebsd-armv7

          # OpenBSD cross-builds
          # amd64
          - runner_label: ubu2204
            os: openbsd
            arch: amd64
            name: openbsd-amd64
          # arm64
          - runner_label: ubu2204
            os: openbsd
            arch: arm64
            name: openbsd-arm64
          # i386
          - runner_label: ubu2204
            os: openbsd
            arch: 386
            name: openbsd-i386

          # NetBSD cross-builds
          # amd64
          - runner_label: ubu2204
            os: netbsd
            arch: amd64
            name: netbsd-amd64
          # arm64
          - runner_label: ubu2204
            os: netbsd
            arch: arm64
            name: netbsd-arm64
          # i386
          - runner_label: ubu2204
            os: netbsd
            arch: 386
            name: netbsd-i386
          # armv7
          - runner_label: ubu2204
            os: netbsd
            arch: arm
            name: netbsd-armv7

          # macOS cross-builds
          # amd64
          - runner_label: ubu2204
            os: darwin
            arch: amd64
            name: macos-amd64
          # arm64
          - runner_label: ubu2204
            os: darwin
            arch: arm64
            name: macos-arm64

          # Windows cross-builds
          # amd64
          - runner_label: ubu2204
            os: windows
            arch: amd64
            name: windows-amd64
          # arm64
          - runner_label: ubu2204
            os: windows
            arch: arm64
            name: windows-arm64
          # i386
          - runner_label: ubu2204
            os: windows
            arch: 386
            name: windows-i386

          # Debian 10-12 self-hosted builds amd64
          # amd64
          - runner_label: deb10
            os: linux
            arch: amd64
            name: debian-10-amd64
            libc: glibc
          - runner_label: deb11
            os: linux
            arch: amd64
            name: debian-11-amd64
            libc: glibc
          - runner_label: deb12
            os: linux
            arch: amd64
            name: debian-12-amd64
            libc: glibc

          # Debian 10-12 self-hosted builds arm64
          # arm64
          - runner_label: deb10
            os: linux
            arch: arm64
            name: debian-10-arm64
            libc: glibc
          - runner_label: deb11
            os: linux
            arch: arm64
            name: debian-11-arm64
            libc: glibc
          - runner_label: deb12
            os: linux
            arch: arm64
            name: debian-12-arm64
            libc: glibc

          # Debian 10-12 self-hosted builds 32-bit ARM
          # armv7
          - runner_label: deb10
            os: linux
            arch: arm
            name: debian-10-armv7
            libc: glibc
          - runner_label: deb11
            os: linux
            arch: arm
            name: debian-11-armv7
            libc: glibc
          - runner_label: deb12
            os: linux
            arch: arm
            name: debian-12-armv7
            libc: glibc

          # Debian 10-12 self-hosted builds i386
          # i386
          - runner_label: deb10
            os: linux
            arch: 386
            name: debian-10-i386
            libc: glibc
          - runner_label: deb11
            os: linux
            arch: 386
            name: debian-11-i386
            libc: glibc
          - runner_label: deb12
            os: linux
            arch: 386
            name: debian-12-i386
            libc: glibc

          # Ubuntu 20.04 - 24.04 self-hosted builds amd64
          # amd64
          - runner_label: ubu2004
            os: linux
            arch: amd64
            name: ubuntu-20.04-amd64
            libc: glibc
          - runner_label: ubu2204
            os: linux
            arch: amd64
            name: ubuntu-22.04-amd64
            libc: glibc
          - runner_label: ubu2404
            os: linux
            arch: amd64
            name: ubuntu-24.04-amd64
            libc: glibc

          # Ubuntu 20.04 - 24.04 self-hosted builds arm64
          # arm64
          - runner_label: ubu2004
            os: linux
            arch: arm64
            name: ubuntu-20.04-arm64
            libc: glibc
          - runner_label: ubu2204
            os: linux
            arch: arm64
            name: ubuntu-22.04-arm64
            libc: glibc
          - runner_label: ubu2404
            os: linux
            arch: arm64
            name: ubuntu-24.04-arm64
            libc: glibc

          # Ubuntu 20.04 - 24.04 self-hosted builds 32-bit ARM
          # armv7
          - runner_label: ubu2004
            os: linux
            arch: arm
            name: ubuntu-20.04-armv7
            libc: glibc
          - runner_label: ubu2204
            os: linux
            arch: arm
            name: ubuntu-22.04-armv7
            libc: glibc
          - runner_label: ubu2404
            os: linux
            arch: arm
            name: ubuntu-24.04-armv7
            libc: glibc

          # Ubuntu 20.04 - 24.04 self-hosted builds i386
          # i386
          - runner_label: ubu2004
            os: linux
            arch: 386
            name: ubuntu-20.04-i386
            libc: glibc
          - runner_label: ubu2204
            os: linux
            arch: 386
            name: ubuntu-22.04-i386
            libc: glibc
          - runner_label: ubu2404
            os: linux
            arch: 386
            name: ubuntu-24.04-i386
            libc: glibc

    steps:
      - name: Clean build directory
        run: rm -rf build dist

      - name: Checkout code
        uses: actions/checkout@v4

#      - name: Clean Go module cache
#        run: |
#          rm -rf ~/.cache/go-build ~/go/pkg/mod
#      - name: Restore Go modules cache
#        # your cache restore step here

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: false
          # if your self-hosted runners are not reset (i.e., they persist their workspace and their Go module cache between jobs),
          # using the GitHub Actions dependency cache provides little to no benefit.
          # In fact, it can sometimes cause issues (like stale or conflicting cache states)
          # and may slow down your pipeline due to unnecessary cache save/restore steps.
          # On self-hosted runners where the module cache persists between jobs,
          # letting Goâ€™s native cache do its job is almost always faster and more reliable.
          # Results with 44 jobs:
          #  Before (with Actions cache): ~8 minutes
          #  After (cache: false): ~2m 27s

#      - name: Cache Go modules
#        uses: actions/cache@v4
#        with:
#          path: |
#            ~/.cache/go-build
#            ~/go/pkg/mod
#          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
#          restore-keys: |
#            ${{ runner.os }}-go-

      # Run tests with race detector for supported platforms
      - name: Run race detector tests (amd64/linux only)
        if: matrix.os == 'linux' && matrix.arch == 'amd64'
        run: go test -race ./...

      - name: Run normal tests (other platforms)
        if: ${{ !(matrix.os == 'linux' && matrix.arch == 'amd64') }}
        run: go test ./...

        # REF_NAME, GITHUB_SHA7 and COMPILER we need for GaRuS!
      - name: "Set GaRuS Variables"
        run: |
          echo "COMPILER=SHR" >> "$GITHUB_ENV"

      - name: Set VERSION and SHA7
        id: vars
        run: |
          # If event is tag or release, use the tag; otherwise, use 0.0.0-SNAPSHOT
          if [[ "${GITHUB_REF_TYPE}" == "tag" || "${GITHUB_EVENT_NAME}" == "release" ]]; then
            VERSION="${GITHUB_REF_NAME}"
          else
            VERSION="0.0.0-SNAPSHOT"
          fi
          # Strip leading 'v' if present
          VERSION="${VERSION#v}"
          SHA7="${GITHUB_SHA::7}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "SHA7=$SHA7" >> $GITHUB_ENV
        env:
          GITHUB_REF_TYPE: ${{ github.ref_type }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_SHA: ${{ github.sha }}

      - name: Build ${{ matrix.name }}
        env:
          VERSION: ${{ env.VERSION }}
          SHA7: ${{ env.SHA7 }}
          OS: ${{ matrix.os }}
          ARCH: ${{ matrix.arch }}
        run: |
          set -euo pipefail
          test -z "$SHA7" && echo "SHA7 not set" && exit 1
          test -z "$VERSION" && echo "VERSION not set" && exit 1
          test -z "$OS" && echo "VERSION not set" && exit 1
          test -z "$ARCH" && echo "VERSION not set" && exit 1
          echo "VERSION=$VERSION SHA7=$SHA7 OS=$OS ARCH=$ARCH"
          mkdir -p builds/${{ matrix.name }}/usr/bin
          if [ "${{ matrix.os }}" == "windows" ]; then
            binary_name=NZBreX.exe
          else
            binary_name=NZBreX
          fi
          GOARCH=${{ matrix.arch }} GOOS=${{ matrix.os }} go build -ldflags="-s -w -X main.appVersion=${{ env.REF_NAME }}" -o builds/${{ matrix.name }}/usr/bin/$binary_name
          if [ ! -f cleanHeaders.txt ]; then
            echo "cleanHeaders.txt not found! Build cannot continue." >&2
            exit 1
          fi
          if [ ! -f provider.sample.json ]; then
            echo "provider.sample.json not found! Build cannot continue." >&2
            exit 1
          fi
          if [ ! -f provider.ygg.json ]; then
            echo "provider.ygg.json not found! Build cannot continue." >&2
            exit 1
          fi
          sha256sum builds/${{ matrix.name }}/usr/bin/$binary_name > builds/${{ matrix.name }}/usr/bin/$binary_name.sha256sum
          sha512sum builds/${{ matrix.name }}/usr/bin/$binary_name > builds/${{ matrix.name }}/usr/bin/$binary_name.sha512sum
          #zip -j "NZBreX_${{ env.REF_NAME }}-${{ matrix.name }}.zip" builds/${{ matrix.name }}/usr/bin/$binary_name builds/${{ matrix.name }}/usr/bin/$binary_name.sha* cleanHeaders.txt provider.sample.json provider.ygg.json
          zip -j "NZBreX_${VERSION}-${SHA7}-${OS}-${ARCH}.zip" builds/${{ matrix.name }}/usr/bin/$binary_name builds/${{ matrix.name }}/usr/bin/$binary_name.sha* cleanHeaders.txt provider.sample.json provider.ygg.json
          # Only make .deb packages for Linux with glibc
          matrix_libc="${{ matrix.libc }}"
          matrix_distro="${{ matrix.distro }}"
          if [ "${{ matrix.os }}" == "linux" ] && [ "${{ matrix.libc }}" = "glibc" -o -z "${{ matrix.libc }}" ]; then
            mkdir -p builds/${{ matrix.name }}/DEBIAN
            VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
            if [[ ! $VERSION =~ ^[0-9] ]]; then
              VERSION="0.0.$(date +%s)-$VERSION"
            fi
            ARCH=${{ matrix.arch }}
            echo "Package: NZBreX" > builds/${{ matrix.name }}/DEBIAN/control
            echo "Version: ${VERSION}" >> builds/${{ matrix.name }}/DEBIAN/control
            echo "Maintainer: ${{ github.repository_owner }} <nzbrex@usenet-server.com>" >> builds/${{ matrix.name }}/DEBIAN/control
            echo "Architecture: ${ARCH}" >> builds/${{ matrix.name }}/DEBIAN/control
            echo "Description: NZBreX - a cmd line tool to re-upload articles missing from providers" >> builds/${{ matrix.name }}/DEBIAN/control
            dpkg-deb --root-owner-group --build builds/${{ matrix.name }} NZBreX_${{ env.REF_NAME }}-${{ matrix.name }}.deb
          fi

      - name: "Upload binary to private GaRuS (Git-actions-Runner-upload-Server)"
        run: |
          upload_with_retry() {
            local file="$1"
            local max_attempts=30
            local attempt=1
            local delay=30
            while [ $attempt -le $max_attempts ]; do
              echo "Upload attempt $attempt for $file..."
              if curl -f -F "file=@$file" \
                   -H "X-Git-Repo: ${{ github.repository }}" \
                   -H "X-Git-Ref: ${{ github.ref_name }}" \
                   -H "X-Git-SHA7: ${GITHUB_SHA::7}" \
                   -H "X-Git-Comp: ${{ env.COMPILER }}" \
                   -H "X-Auth-Token: ${{ secrets.BUILD_TEST_UPLOAD_TOKEN }}" \
                   http://10.20.0.1:58080/upload.php; then
                echo "Upload succeeded for $file"
                return 0
              else
                echo "Upload failed for $file. Retrying in $delay seconds..."
                sleep $delay
                attempt=$(( attempt + 1 ))
              fi
            done
            echo "Upload failed for $file after $max_attempts attempts."
            return 1
          }

          set -e
          for ext in zip deb; do
            file="NZBreX_${{ env.REF_NAME }}-${{ matrix.name }}.${ext}"
            if [ -e "$file" ]; then
              for algo in 256 512; do
                sha="sha${algo}sum"
                $sha "$file" > "$file.$sha"
                cat "$file.$sha"
                upload_with_retry "$file.$sha"
              done
              upload_with_retry "$file"
            fi
          done


#          set -e
#          for ext in zip deb; do
#            file="NZBreX_${{ env.REF_NAME }}-${{ matrix.name }}.${ext}"
#            if [ -e "$file" ]; then
#              for algo in 256 512; do
#                sha="sha${algo}sum"
#                $sha "$file" > "$file.$sha"
#                curl -f -F "file=@$file.$sha" \
#                  -H "X-Git-Repo: ${{ github.repository }}" \
#                  -H "X-Git-Ref: ${{ env.REF_NAME }}" \
#                  -H "X-Auth-Token: ${{ secrets.BUILD_TEST_UPLOAD_TOKEN }}" \
#                  http://10.20.0.1:58080/upload.php
#              done
#              curl -f -F "file=@$file" \
#                -H "X-Git-Repo: ${{ github.repository }}" \
#                -H "X-Git-Ref: ${{ env.REF_NAME }}" \
#                -H "X-Auth-Token: ${{ secrets.BUILD_TEST_UPLOAD_TOKEN }}" \
#                http://10.20.0.1:58080/upload.php
#            fi
#          done

#          if [ -e "NZBreX_${{ env.REF_NAME }}-${{ matrix.name }}.zip" ]; then
#            sha256sum "NZBreX_${{ env.REF_NAME }}-${{ matrix.name }}.zip" > "NZBreX_${{ env.REF_NAME }}-${{ matrix.name }}.zip.sha256sum"
#            sha512sum "NZBreX_${{ env.REF_NAME }}-${{ matrix.name }}.zip" > "NZBreX_${{ env.REF_NAME }}-${{ matrix.name }}.zip.sha512sum"
#            curl -F "file=@NZBreX_${{ env.REF_NAME }}-${{ matrix.name }}.zip" -H "X-Git-Repo: ${{ github.repository }}" -H "X-Git-Ref: ${{ env.REF_NAME }}" -H "X-Auth-Token: ${{ secrets.BUILD_TEST_UPLOAD_TOKEN }}" http://10.20.0.1:58080/upload.php
#            curl -F "file=@NZBreX_${{ env.REF_NAME }}-${{ matrix.name }}.zip.sha256sum" -H "X-Git-Repo: ${{ github.repository }}" -H "X-Git-Ref: ${{ env.REF_NAME }}" -H "X-Auth-Token: ${{ secrets.BUILD_TEST_UPLOAD_TOKEN }}" http://10.20.0.1:58080/upload.php
#            curl -F "file=@NZBreX_${{ env.REF_NAME }}-${{ matrix.name }}.zip.sha512sum" -H "X-Git-Repo: ${{ github.repository }}" -H "X-Git-Ref: ${{ env.REF_NAME }}" -H "X-Auth-Token: ${{ secrets.BUILD_TEST_UPLOAD_TOKEN }}" http://10.20.0.1:58080/upload.php
#          fi
#          if [ -e "NZBreX_${{ env.REF_NAME }}-${{ matrix.name }}.deb" ]; then
#            sha256sum "NZBreX_${{ env.REF_NAME }}-${{ matrix.name }}.deb" > "NZBreX_${{ env.REF_NAME }}-${{ matrix.name }}.deb.sha256sum"
#            sha512sum "NZBreX_${{ env.REF_NAME }}-${{ matrix.name }}.deb" > "NZBreX_${{ env.REF_NAME }}-${{ matrix.name }}.deb.sha512sum"
#            curl -F "file=@NZBreX_${{ env.REF_NAME }}-${{ matrix.name }}.deb" -H "X-Git-Repo: ${{ github.repository }}" -H "X-Git-Ref: ${{ env.REF_NAME }}" -H "X-Auth-Token: ${{ secrets.BUILD_TEST_UPLOAD_TOKEN }}" http://10.20.0.1:58080/upload.php
#            curl -F "file=@NZBreX_${{ env.REF_NAME }}-${{ matrix.name }}.deb.sha256sum" -H "X-Git-Repo: ${{ github.repository }}" -H "X-Git-Ref: ${{ env.REF_NAME }}" -H "X-Auth-Token: ${{ secrets.BUILD_TEST_UPLOAD_TOKEN }}" http://10.20.0.1:58080/upload.php
#            curl -F "file=@NZBreX_${{ env.REF_NAME }}-${{ matrix.name }}.deb.sha512sum" -H "X-Git-Repo: ${{ github.repository }}" -H "X-Git-Ref: ${{ env.REF_NAME }}" -H "X-Auth-Token: ${{ secrets.BUILD_TEST_UPLOAD_TOKEN }}" http://10.20.0.1:58080/upload.php
#          fi

#      - name: Upload Build Artifacts to github blob storage
#        uses: actions/upload-artifact@v4
#        with:
#          name: build-${{ matrix.name }}
#          path: |
#            NZBreX_${{ env.REF_NAME }}-${{ matrix.name }}.zip
#            NZBreX_${{ env.REF_NAME }}-${{ matrix.name }}.deb
#            NZBreX_${{ env.REF_NAME }}-${{ matrix.name }}.zip.sha256sum
#            NZBreX_${{ env.REF_NAME }}-${{ matrix.name }}.deb.sha256sum
#            NZBreX_${{ env.REF_NAME }}-${{ matrix.name }}.zip.sha512sum
#            NZBreX_${{ env.REF_NAME }}-${{ matrix.name }}.deb.sha512sum
#            builds/${{ matrix.name }}/archpkg/PKGBUILD
#            builds/${{ matrix.name }}/archpkg/nzbrex-*.pkg.tar.*
#            builds/${{ matrix.name }}/archpkg/NZBreX
#            builds/${{ matrix.name }}/archpkg/cleanHeaders.txt
#            builds/${{ matrix.name }}/archpkg/provider.sample.json
#            builds/${{ matrix.name }}/archpkg/provider.ygg.json
#          retention-days: 1
#          if-no-files-found: warn

#      - name: Upload Binary to github blob storage
#        uses: actions/upload-artifact@v4
#        with:
#          name: binary-${{ matrix.name }}
#          path: builds/${{ matrix.name }}/usr/bin/*
#          retention-days: 1
#          if-no-files-found: warn

#      - name: Upload Release Assets
#        if: github.event_name == 'release'
#        uses: softprops/action-gh-release@v2
#        with:
#          files: |
#            NZBreX_${{ env.REF_NAME }}-*.zip
#            NZBreX_${{ env.REF_NAME }}-*.deb

#      #  $GITHUB_WORKSPACE only covers the checked-out project for the current job.
#      #  It does not include global caches or other directories outside the current jobâ€™s workspace (like ~/.cache, /tmp, or custom directories).

#      - name: Clean workspace (self-hosted only)
#        if: runner.os == 'Linux' && runner.name == 'self-hosted'
#        run: rm -rf "$GITHUB_WORKSPACE"/*

      - name: Clean build directory
        run: rm -rf build dist


