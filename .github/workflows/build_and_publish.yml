name: Build and Publish

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build_matrix:
    name: Build (All platforms/archs on Ubuntu-latest)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os-arch:
          - name: Linux-amd64
            os: linux
            arch: amd64
          - name: Linux-arm64
            os: linux
            arch: arm64
          - name: Linux-i386
            os: linux
            arch: 386
          - name: macOS-amd64
            os: darwin
            arch: amd64
          - name: macOS-arm64
            os: darwin
            arch: arm64
          - name: Windows-amd64
            os: windows
            arch: amd64
          - name: Windows-i386
            os: windows
            arch: 386
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Set Ref Name Variable
        run: |
          if [ "$GITHUB_EVENT_NAME" != "release" ]; then
            ref_name=${GITHUB_SHA::7}
          else
            ref_name=${{ github.ref_name }}
          fi
          echo "REF_NAME=${ref_name}" >> "$GITHUB_ENV"

      - name: Build for ${{ matrix.os-arch.name }}
        run: |
          mkdir -p builds/${{ matrix.os-arch.name }}/usr/bin
          if [ "${{ matrix.os-arch.os }}" == "windows" ]; then
            binary_name=NZBreX.exe
          else
            binary_name=NZBreX
          fi
          GOARCH=${{ matrix.os-arch.arch }} GOOS=${{ matrix.os-arch.os }} go build -ldflags="-s -w -X main.appVersion=${{ env.REF_NAME }}" -o builds/${{ matrix.os-arch.name }}/usr/bin/$binary_name
          if [ ! -f cleanHeaders.txt ]; then
            echo "cleanHeaders.txt not found! Build cannot continue." >&2
            exit 1
          fi
          if [ ! -f provider.sample.json ]; then
            echo "provider.sample.json not found! Build cannot continue." >&2
            exit 1
          fi
          if [ ! -f provider.ygg.json ]; then
            echo "provider.ygg.json not found! Build cannot continue." >&2
            exit 1
          fi
          zip -j "NZBreX_${{ env.REF_NAME }}-${{ matrix.os-arch.os }}-${{ matrix.os-arch.arch }}.zip" builds/${{ matrix.os-arch.name }}/usr/bin/$binary_name cleanHeaders.txt provider.sample.json provider.ygg.json
          # Only make .deb packages for Linux
          if [ "${{ matrix.os-arch.os }}" == "linux" ]; then
            mkdir -p builds/${{ matrix.os-arch.name }}/DEBIAN
            VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
            ARCH=${{ matrix.os-arch.arch }}
            echo "Package: NZBreX" >> builds/${{ matrix.os-arch.name }}/DEBIAN/control
            echo "Version: ${VERSION}" >> builds/${{ matrix.os-arch.name }}/DEBIAN/control
            echo "Maintainer: ${{ github.repository_owner }} <nzbrex@usenet-server.com>" >> builds/${{ matrix.os-arch.name }}/DEBIAN/control
            echo "Architecture: ${ARCH}" >> builds/${{ matrix.os-arch.name }}/DEBIAN/control
            echo "Description: NZBreX - a cmd line tool to re-upload articles missing from providers" >> builds/${{ matrix.os-arch.name }}/DEBIAN/control
            dpkg-deb --root-owner-group --build builds/${{ matrix.os-arch.name }} NZBreX_${{ env.REF_NAME }}-${{ matrix.os-arch.os }}-${{ matrix.os-arch.arch }}.deb
          fi

      - name: Upload Release Assets
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            NZBreX_*.zip
            NZBreX_*.deb

  build_linux_debian:
    name: Build for Debian ${{ matrix.debian_version }} (x64) on self-hosted runner
    runs-on:
      - self-hosted
      - Linux
      - X64
      - ${{ matrix.runner_label }}
    strategy:
      matrix:
        include:
          - debian_version: deb10
            runner_label: deb10
          - debian_version: deb11
            runner_label: deb11
          - debian_version: deb12
            runner_label: deb12
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Set Ref Name Variable
        run: |
          if [ "$GITHUB_EVENT_NAME" != "release" ]; then
            ref_name=${GITHUB_SHA::7}
          else
            ref_name=${{ github.ref_name }}
          fi
          echo "REF_NAME=${ref_name}" >> "$GITHUB_ENV"

      - name: Build for Debian ${{ matrix.debian_version }}
        run: |
          mkdir -p builds/debian-${{ matrix.debian_version }}/usr/bin
          binary_name=NZBreX
          GOARCH=amd64 GOOS=linux go build -ldflags="-s -w -X main.appVersion=${{ env.REF_NAME }}" -o builds/debian-${{ matrix.debian_version }}/usr/bin/$binary_name
          if [ ! -f cleanHeaders.txt ]; then
            echo "cleanHeaders.txt not found! Build cannot continue." >&2
            exit 1
          fi
          if [ ! -f provider.sample.json ]; then
            echo "provider.sample.json not found! Build cannot continue." >&2
            exit 1
          fi
          if [ ! -f provider.ygg.json ]; then
            echo "provider.ygg.json not found! Build cannot continue." >&2
            exit 1
          fi
          zip -j "NZBreX_${{ env.REF_NAME }}-debian-${{ matrix.debian_version }}-amd64.zip" builds/debian-${{ matrix.debian_version }}/usr/bin/$binary_name cleanHeaders.txt provider.sample.json provider.ygg.json

          # Make deb package
          mkdir -p builds/debian-${{ matrix.debian_version }}/DEBIAN
          VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
          ARCH=amd64
          echo "Package: NZBreX" >> builds/debian-${{ matrix.debian_version }}/DEBIAN/control
          echo "Version: ${VERSION}" >> builds/debian-${{ matrix.debian_version }}/DEBIAN/control
          echo "Maintainer: ${{ github.repository_owner }} <nzbrex@usenet-server.com>" >> builds/debian-${{ matrix.debian_version }}/DEBIAN/control
          echo "Architecture: ${ARCH}" >> builds/debian-${{ matrix.debian_version }}/DEBIAN/control
          echo "Description: NZBreX - a cmd line tool to re-upload articles missing from providers" >> builds/debian-${{ matrix.debian_version }}/DEBIAN/control
          dpkg-deb --root-owner-group --build builds/debian-${{ matrix.debian_version }} NZBreX_${{ env.REF_NAME }}-debian-${{ matrix.debian_version }}-amd64.deb

      - name: Upload Release Assets
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            NZBreX_${{ env.REF_NAME }}-debian-${{ matrix.debian_version }}-amd64.zip
            NZBreX_${{ env.REF_NAME }}-debian-${{ matrix.debian_version }}-amd64.deb

  build_linux_ubuntu:
    name: Build for Ubuntu ${{ matrix.ubuntu_version }} (x64) on self-hosted runner
    runs-on:
      - self-hosted
      - Linux
      - X64
      - ${{ matrix.runner_label }}
    strategy:
      matrix:
        include:
          - ubuntu_version: ubu2004
            runner_label: ubu2004
          - ubuntu_version: ubu2204
            runner_label: ubu2204
          - ubuntu_version: ubu2404
            runner_label: ubu2404
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Set Ref Name Variable
        run: |
          if [ "$GITHUB_EVENT_NAME" != "release" ]; then
            ref_name=${GITHUB_SHA::7}
          else
            ref_name=${{ github.ref_name }}
          fi
          echo "REF_NAME=${ref_name}" >> "$GITHUB_ENV"

      - name: Build for Ubuntu ${{ matrix.ubuntu_version }}
        run: |
          mkdir -p builds/ubuntu-${{ matrix.ubuntu_version }}/usr/bin
          binary_name=NZBreX
          GOARCH=amd64 GOOS=linux go build -ldflags="-s -w -X main.appVersion=${{ env.REF_NAME }}" -o builds/ubuntu-${{ matrix.ubuntu_version }}/usr/bin/$binary_name
          if [ ! -f cleanHeaders.txt ]; then
            echo "cleanHeaders.txt not found! Build cannot continue." >&2
            exit 1
          fi
          if [ ! -f provider.sample.json ]; then
            echo "provider.sample.json not found! Build cannot continue." >&2
            exit 1
          fi
          if [ ! -f provider.ygg.json ]; then
            echo "provider.ygg.json not found! Build cannot continue." >&2
            exit 1
          fi
          zip -j "NZBreX_${{ env.REF_NAME }}-ubuntu-${{ matrix.ubuntu_version }}-amd64.zip" builds/ubuntu-${{ matrix.ubuntu_version }}/usr/bin/$binary_name cleanHeaders.txt provider.sample.json provider.ygg.json

          # Make deb package
          mkdir -p builds/ubuntu-${{ matrix.ubuntu_version }}/DEBIAN
          VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
          ARCH=amd64
          echo "Package: NZBreX" >> builds/ubuntu-${{ matrix.ubuntu_version }}/DEBIAN/control
          echo "Version: ${VERSION}" >> builds/ubuntu-${{ matrix.ubuntu_version }}/DEBIAN/control
          echo "Maintainer: ${{ github.repository_owner }} <nzbrex@usenet-server.com>" >> builds/ubuntu-${{ matrix.ubuntu_version }}/DEBIAN/control
          echo "Architecture: ${ARCH}" >> builds/ubuntu-${{ matrix.ubuntu_version }}/DEBIAN/control
          echo "Description: NZBreX - a cmd line tool to re-upload articles missing from providers" >> builds/ubuntu-${{ matrix.ubuntu_version }}/DEBIAN/control
          dpkg-deb --root-owner-group --build builds/ubuntu-${{ matrix.ubuntu_version }} NZBreX_${{ env.REF_NAME }}-ubuntu-${{ matrix.ubuntu_version }}-amd64.deb

      - name: Upload Release Assets
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            NZBreX_${{ env.REF_NAME }}-ubuntu-${{ matrix.ubuntu_version }}-amd64.zip
            NZBreX_${{ env.REF_NAME }}-ubuntu-${{ matrix.ubuntu_version }}-amd64.deb
